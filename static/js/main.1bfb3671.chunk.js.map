{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Banner/index.js","components/CatCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","href","instruction","currentScore","topScore","Banner","CatCard","onClick","clickedCat","id","alt","name","src","image","shuffleArray","array","i","length","j","Math","floor","random","temp","shuffledCats","cats","App","state","console","log","clicked","selectedCat","index","alert","_this","setState","_this2","this","components_Navbar","components_Wrapper","components_Banner","map","cat","components_CatCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bfb3671.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n return(\r\n    <div className='navbar navbar-dark bg-dark font-weight-bold sticky-top'>\r\n      <div className='col-md-4 text-center'><a href='/'>Clicky Game</a></div>\r\n      <div className='col-md-4 text-center'>{props.instruction}</div>\r\n      <div className='col-md-4 text-center'>\r\n      Current Score: {props.currentScore} /\r\n      Top Score: {props.topScore}</div>\r\n    </div>\r\n );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Banner(props){\r\n    return(\r\n        <div className='text-center banner'>\r\n        <h1>Welcome to the clicky cat game</h1>\r\n        <h2>Click on a feline to earn points, but don't click on any image more than once!</h2>\r\n        </div>);\r\n};\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CatCard(props){\r\n    return(\r\n        <div className=\"image col-md-3\" onClick={()=>props.clickedCat(props.id)}>\r\n                <img className='img-thumbnail' alt={props.name} src={props.image} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CatCard;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport cats from \"./cats.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Banner from \"./components/Banner\";\nimport CatCard from \"./components/CatCard\";\n\nlet instruction='Click on any feline to begin!';\nlet currentScore=0;\nlet topScore=0;\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nlet shuffledCats=shuffleArray(cats);\n\nclass App extends Component {\n\n  state = {\n    shuffledCats\n  };\n\n  clickedCat=id=>{\n    console.log(\"id: \"+id);\n    console.log(\"clicked: \"+shuffledCats[id-1].clicked)\n    let selectedCat={};\n    let index=0;\n    for(var i=0;i<shuffledCats.length;i++){\n      if(shuffledCats[i].id===id){\n        selectedCat=shuffledCats[i];\n        index=i;\n        console.log(\"selected cat: \"+selectedCat.clicked);\n        console.log(\"shuffledCats: \"+shuffledCats)\n      }\n    }\n    if(!selectedCat.clicked){\n      instruction='You guessed correctly!';\n      //shuffledCats[(id-1)].clicked=true;\n      shuffledCats[index].clicked=true;\n      currentScore++;\n      if(currentScore>=topScore){\n      topScore=currentScore;}\n      shuffledCats=shuffleArray(shuffledCats);\n      this.setState(shuffledCats);\n      if(currentScore===shuffledCats.length){\n        alert(\"Congratulations! You have clicked on all cats! You win the game, raaawr!\");\n        for(var i=0;i<shuffledCats.length;i++){\n          shuffledCats[i].clicked=false;\n        }\n        instruction='Click on any feline to start over!';\n        currentScore=0;\n      }\n      \n    }\n    else{\n      //endGame\n      for(var i=0;i<shuffledCats.length;i++){\n        shuffledCats[i].clicked=false;\n      }\n      instruction='You guessed incorrectly!';\n      currentScore=0;\n      shuffledCats=shuffleArray(shuffledCats);\n      alert(\"You have lost! Be devoured by the Roman Lions!\");\n      instruction='Click on any feline to start over!';\n      this.setState(shuffledCats);\n    }\n  };\n  render() {\n    return (\n       <div>\n       <Navbar\n        instruction={instruction}\n        currentScore={currentScore}\n        topScore={topScore}\n       ></Navbar>\n       <Wrapper>\n       <Banner>\n       </Banner>\n       {this.state.shuffledCats.map(cat => (\n          <CatCard\n           \n            id={cat.id}\n            key={cat.id}\n            name={cat.name}\n            image={cat.image}\n            clicked={cat.clicked}\n            clickedCat={this.clickedCat}\n           \n          />\n        ))}\n\n       </Wrapper>\n       </div>\n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}